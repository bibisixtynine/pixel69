import interact from "https://cdn.interactjs.io/v1.10.11/interactjs/index.js";

import {log, iOS, isInstalledAsPWA} from './zutils.js'

import {Button,hideUI,showUI, toggleUI,Text,NewLine} from './jsui.js'

log("main.js started")



/////////////////////////////////////////////////////////////////
//                                                            //
// WEBSOCKET CLIENT
//

let nbDiodeStateReceived = 0;
let softwareVersion = "0.1b+";

setInterval(function () {
  if (nbDiodeStateReceived < 2) {
    // red pixel
    let msg = {
      px: 20,
      py: 20,
      dx: 1,
      dy: 1,
      fillStyle: "red",
    };
    setPixel(msg);
  }
  nbDiodeStateReceived = 0;
}, 3000);

let ws = 0;

function connect() {
  // INIT
  ws = new WebSocket("wss://eko-server69-dev.glitch.me");

  // OPEN
  ws.onopen = function () {
    console.log("connection established");
    let msg = {
      px: 0,
      py: 0,
    };
    ws.send(JSON.stringify(msg));
  };

  // MESSAGE
  ws.onmessage = function (e) {
    let msg = JSON.parse(event.data);
    if (msg.clear == "1") {
      console.log("clearing");
      clearCanvas();
    }
    if (!msg.diodeState) {
      // save pixel
      pixelBuffer.push({
        x: msg.px,
        y: msg.py,
        w: pixelSize,
        h: pixelSize,
        fillStyle: msg.fillStyle,
      });
    } else {
      nbDiodeStateReceived += 1;
    }
    setPixel(msg);
  };

  // CLOSE
  ws.onclose = function (e) {
    console.log("connection closed");
    // red pixel
    let msg = {
      px: 20,
      py: 20,
      dx: 1,
      dy: 1,
      fillStyle: "red",
    };
    setPixel(msg);
    setTimeout(function () {
      connect();
    }, 1000);
  };

  // ERROR
  ws.onerror = function (err) {
    // red pixel
    console.log("connection error");
    let msg = {
      px: 20,
      py: 20,
      dx: 1,
      dy: 1,
      fillStyle: "red",
    };
    setPixel(msg);

    console.error("Socket encountered error: ", err.message, "Closing socket");
    ws.close();
  };
}

connect();
//
// WEBSOCKET CLIENT
//                                                            \\
///////////////////////////////////////////////////////////////\\


/////////////////////////////////////////////////////////////////
//                                                            //
// PIXEL DRAW
//
var pixelSize = 8;

// to store the pixel art
let pixelBuffer = [];

interact(".rainbow-pixel-canvas")
  //
  .draggable({
    max: Infinity,
    maxPerElement: Infinity,
    inertia: false,
    origin: "self",
    modifiers: [
      interact.modifiers.snap({
        // snap to the corners of a grid
        targets: [interact.snappers.grid({ x: pixelSize, y: pixelSize })],
      }),
    ],
    listeners: {
      ////////////////////////////////////////////
      // 'move' : draw colored squares on move
      move: function (event) {
        hideUI();
        var context = event.target.getContext("2d");
        // calculate the angle of the drag direction
        var dragAngle = (180 * Math.atan2(event.dx, event.dy)) / Math.PI;

        // set pixel color based on drag angle and speed
        let fillStyle =
          "hsl(" +
          dragAngle +
          ", 86%, " +
          (30 + Math.min(event.speed / 1000, 1) * 50) +
          "%)";
        let x = event.pageX;
        let y = event.pageY;
        let dx = event.dx;
        let dy = event.dy;
        let r = pixelSize / 2;

        // draw pixel
        //drawPixel(context, x, y, dx, dy, r, fillStyle);

        // send pixel
        let msg = {
          px: x,
          py: y,
          dx: dx,
          dy: dy,
          fillStyle: fillStyle,
        };
        ws.send(JSON.stringify(msg));
      }, // 'move'
    }, // 'listeners'
  }) // '.draggable'
  //
  // 'doubletap' : clear the canvas on doubletap
  .on("doubletap", function (event) {
    showUI();
    /*
    clearCanvas();
    resizeCanvases();
    let msg = {
      clear: 1,
    };
    ws.send(JSON.stringify(msg));*/
  });

function resizeCanvases() {
  [].forEach.call(
    document.querySelectorAll(".rainbow-pixel-canvas"),
    function (canvas) {
      delete canvas.width;
      delete canvas.height;

      var rect = canvas.getBoundingClientRect();

      canvas.width = rect.width;
      canvas.height = rect.height;

      // redraw the pixel art
      let ctx = canvas.getContext("2d");

      pixelBuffer.forEach((item) => {
        drawPixel(ctx, item.x, item.y, 1, 1, pixelSize / 2, item.fillStyle);
        //ctx.fillStyle = item.fillStyle;
        //ctx.fillRect(item.x, item.y, item.w, item.h);
      });
    }
  );
}

resizeCanvases();

function setPixel(msg) {
  let canvas = document.querySelectorAll(".rainbow-pixel-canvas")[0];
  //console.log("canvas = " + canvas[0])
  let context = canvas.getContext("2d");
  let fillStyle = msg.fillStyle;
  drawPixel(context, msg.px, msg.py, msg.dx, msg.dy, pixelSize / 2, fillStyle);
  //context.fillRect(msg.px, msg.py, pixelSize, pixelSize);
}

function clearCanvas() {
  let canvas = document.querySelectorAll(".rainbow-pixel-canvas")[0];
  //console.log("canvas = " + canvas[0])
  let context = canvas.getContext("2d");
  context.clearRect(0, 0, context.canvas.width, context.canvas.height);
  pixelBuffer = [];
}

function sayHello(msg) {
  console.log("hello from :" + msg);
}

function drawPixel(
  context,
  x,
  y,
  dx = 1,
  dy = 1,
  r = pixelSize,
  fillStyle = "red"
) {
  if (x == 0 && y == 0) return;

  context.fillStyle = fillStyle;
  //context.fillRect(x - r, y - r, r * 2, r * 2);
  let speed = Math.sqrt(dx * dx + dy * dy);
  context.beginPath();
  context.arc(x, y, r, 0, 2 * Math.PI, false);
  context.fill();
}

// interact.js can also add DOM event listeners
/*interact(document).on('DOMContentLoaded', resizeCanvases);*/
interact(window).on("resize", resizeCanvases);
//
// PIXEL DRAW
//                                                            \\
///////////////////////////////////////////////////////////////\\


/////////////////////////////////////////////////////////////////
//                                                            //
// UI
//
window.onload = function () {
  
  NewLine()
  
  Text("pixel69 " + softwareVersion)
    .fontSize(20).padding(0)
    .borderWidth(0)
    .padding(0)
    .fontWeight(600)
  
  Text("üëÜdouble-tap pour r√©-afficher ce menu")
    .fontSize(16).padding(0)
    .borderWidth(0)
    .padding(0)
    .fontWeight(200)
  
  if ( iOS() && !isInstalledAsPWA() )
  Text("üöπinstallez pixel69 sur l'√©cran d'accueil via le bouton de partage [^] puis 'Sur l'√©cran d'accueil [+]'")
    .fontSize(16).padding(0)
    .borderWidth(0)
    .padding(0)
    .fontWeight(200)
  
  if ( iOS() && !isInstalledAsPWA() )
    Text("‚ùé fermer tous les onglets puis tourner le t√©l√©phone en mode paysage pour passer en plein √©cran")
      .fontSize(16).padding(0)
      .borderWidth(0)
      .padding(0)
      .fontWeight(200)
  
  NewLine()
  
  Button("effacer le dessin<br>‚ùå")
    .isHidden(false)
    .fontSize(14)
    .padding(20,10)
    .fontWeight(200)
    .onClick( (event) => {
      clearCanvas()
      let msg = {
        clear: 1,
      }
      ws.send(JSON.stringify(msg))
      hideUI()
    })
  
  Button("continuer le dessin<br>üëâ")
    .isHidden(false)
    .fontSize(14)
    .padding(20,10)
    .fontWeight(200)
    .onClick( (event) => {
      hideUI()
    })
  
  if ( !iOS() )
    Button("utiliser tout l'√©cran<br>üì∫")
    .fontSize(14)
      .padding(20,10)
      .fontWeight(200)
      .isHidden(false)
      .onClick( function () {
      document.documentElement.webkitRequestFullScreen();
      hideUI();
    });
};
//
// UI
//                                                            \\
///////////////////////////////////////////////////////////////\\
